%1a)

T=[
    0    0.5 0   0.5 0
    0.25 0   1/3 0   0
    0.25 0.5 0   0.5 0
    0.25 0   1/3 0   0
    0.25 0   1/3 0   1 ];


one=randi(4);       %chooses random number between 1 and 4
set_of_letters= 'amor';
state=crawl(T,one,5);   %does the state matrix with the first state being 'one'
state=state(1:length(state)-1); %resizes the state matrix so the '.' does not appear
word=set_of_letters(state);     
disp(word); %displays the word chosen

%1b)
n=1e5;
l=cell(n,1);    %creates cell array n by 1

for i=1:n
    one=randi(4);
    set_of_letters= 'amor';
    state=crawl(T,one,5);
    state=state(1:length(state)-1);
    word=set_of_letters(state);
    l{i}=word;                  %adds the word to the cell array
end 

uW = length(unique(l)); %number of different words generated
ul=unique(l);           %matrix with the unique words in the cell array
[uc, ~, idc] = unique(l) ;
counts = accumarray(idc,ones(size(idc))); %total count of each word
fprintf('1b) Total of different words: %0.1f',uW);

probM=cell(uW,2);   %creates matrix with the words and the number of appearences of each one

for i=1:uW
    probM(i,1)=ul(i);               %puts the  word of index i in the first column of the cell array 
    probM(i,2)=num2cell(counts(i)); %puts the count of the  word index i on the 2nd column
end


out = sortrows(probM,2);    %sorts in ascending order the probM matrix so we can get the 5 bigger values

j=0;
for i=uW:-1:uW-4
    j=j+1;
    fprintf('\nword %d:',j);    %word index j(0 to 5)
    disp(out(i,1));             %displays the word
    prob=cell2mat(out(i,2))/n;  %calulates the probability of the word 
    fprintf('Probability of word %d = %0.3f\n',j,prob);  %displays probability
end

%1c)


%1d)

%importing the words to cell array
fid= fopen('wordlist-preao-20201103.txt','r');
dicionario= textscan(fid,'%s');
fclose(fid);
dicionario= dicionario{1,1};
dicionario{100};

c=0; %counter of words that are member of the portuguese word list
for i=1:length(l)
    if ismember(l{i,1},dicionario)
        c=c+1;                          %if a random word that is generated by the random word generator
    end                                 %is member of the portuguese list
end                                     %we increment the counter 

prob=c/n;       %calculates the probability that is asked for

fprintf('1d) The probability of the random word generator to generate a valid Portuguese word is %0.03f\n',prob);


%1e) / 1f)
    
T=[
    0    0.5 0   0.5 0
    0.25 0   1/3 0   0
    0.25 0.5 0   0.5 0
    0.25 0   1/3 0   0
    0.25 0   1/3 0   1 ];

input=6;    %maximum length of word (test with 6/8/4)
le=cell(n,1);    %creates cell array n by 1

for i=1:n
    one=randi(4);
    set_of_letters= 'amor';
    state=crawl(T,one,5);
    state=state(1:length(state)-1);
    word=set_of_letters(state);
    if length(word)>=input             %1e)
        newW=extractBefore(word,input+1); %only gets the word till the maximum input number
        le{i}=newW;     %adds the word to the cell array
    else
        le{i}=word;                  %adds the word to the cell array
    end
end 
ule=unique(le);
fprintf('1f)Total of different words with maximum input n: %0.1f\n',length(ule));

c=0; %counter of words that are member of the portuguese word list
for i=1:length(le)
    if ismember(le{i},dicionario)
        c=c+1;                          %if a random word that is generated by the random word generator
    end                                 %is member of the portuguese list
end                                     %we increment the counter 

prob=c/n;       %calculates the probability that is asked for

fprintf('1f)The probability of the random word generator to generate a valid Portuguese word is %0.03f\n',prob);























function state = crawl(H, first, last)
% the sequence of states will be saved in the vector "state"
% initially, the vector contains only the initial state:
state = [first];
% keep moving from state to state until state "last" is reached:
while (1)
state(end+1) = nextState(H, state(end));
if (state(end) == last)
break;
end
end
end
% Returning the next state
% Inputs:
% H - state transition matrix
% currentState - current state
function state = nextState(H, currentState)
% find the probabilities of reaching all states starting at the current one:
probVector = H(:,currentState); % probVector is a row vector
n = length(probVector); %n is the number of states
% generate the next state randomly according to probabilities probVector:
state = discrete_rnd(1:n, probVector);
end
% Generate randomly the next state.
% Inputs:
% states = vector with state values
% probVector = probability vector
function state = discrete_rnd(states, probVector)
U=rand();
i = 1 + sum(U > cumsum(probVector));
state= states(i);
end